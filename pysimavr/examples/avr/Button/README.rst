AVR Button example
==================

This pure AVR C/C++ example reads an AVR input pin assuming there is a
button connected. It does software deboucing and detects button
pressed/released events. It further “prints” those event names by
putting the characters to an unused *General purpose IO register*.
Simavr is receiving the characters there and printing them to log. This
is another (probably simplies) approach to get simavr to print debug
messages out compared to more traditional UART based approach.

Please see the pysimavr `button`_ project for the related python part.

Project structure
-----------------
The main files: 
 ::

  ┌──src                        Source files. 
  │   ├──sim                    Source files only related to the simulation.
  │   │   ├──avr_mcu_section.h  Header file from the simavr project allowing embedding additonal metadata to the elf file.
  │   │   ├──SimHelper.h  
  │   │   └──SimHelper.c        Debug-print function and embedding the MCU+Frequency info.
  │   ├──Button.h
  │   ├──Button.cpp             Class implementing a small state machine for button debouncing and event detection.
  │   └──main.cpp               The main program entry
  ├──makefile                   Makefile to compile the Release and the Debug builds configurations.
  ├──Release                    The compiled elf and hex files and the makefiles generated by the Eclipse CDT plugin.
  └──Debug                      Like the Release folder above with no code optimization and with maximum debug information.
 
Eclipse related files (optional):
 ::
 
  ┌──.project                   Eclipse project file.
  ├──.cproject                  CDT plugin project file.
  ├──.settings                  MCU and similar settings just for the AVR-Eclipse plugin. 
  ├──gdbDebug.launch            Preconfigured Eclipse launch configuration to ease attaching to the simavr GDP port.
  └──gdbinit                    Helper file for Eclipse lanuch configuration. Just to make GDB load the actual elf executable.  

Compilation
-----------
Make:
 Simply run ``make`` in the project root. No Eclipse is needed. Only ``avr_gcc`` is required.

Or by using Eclipse: 
 - Import the project using **menu/File/Import/Existing Projects into Workspace**. 
 - Select this AVR Button project root folder and this `pysimavr/examples/avr/Button`_ project. 
 - Compile with **menu/Project/Build All**.

GDB Debugging with Eclipse
--------------------------

#. Create **Run/Debug** configuration.

   -  Import the `gdbDebug.launch`_ configuration using **menu/File/Import/Launch Configurations**.
   -  Review the newly created Debug configuration: **menu/Run/Debug Configuration/C/C++ Attach to Application/gdbDebug**
   -  Debugger type should be set to **gdbserver** and the **port number** to **1234**: 
      |GDBServer port|      
   -  Debuger executable should be **avr\_gdb** and the command file should
      be specified. This command file ensures the executable is loaded into
      GDB so it can further load the debug information. This should have worked
      automatically but it doesn't.
      |GDBServer main|

#. Start (py)simavr with GDB enabled. For example: ``python pysimavr/examples/button.py`` . Simavr should print
   the GDB port number it is listening on when GDB is enabled. 
#. Attach to the running simavr instance by launching the
   previously created **gdbDebug** configuration in the Eclipse. 
#. Now it is possible to put breakpoints in or pause the running thread. Step
   through the code watch/change variables registers, memory locations etc.
   |DebugView|

.. _button: ../../button.py
.. _pysimavr/examples/avr/Button: .
.. _gdbDebug.launch: gdbDebug.launch

.. |GDBServer port| image:: /docs/Eclipse-GdbPort.png
.. |GDBServer main| image:: /docs/Eclipse-GdbMain.png
.. |DebugView| image:: /docs/Eclipse-DebugView.png
